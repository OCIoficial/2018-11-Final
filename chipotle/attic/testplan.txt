# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1 - validators/st1.cpp]
  # Random tests
  1     ; gen_random.py 2 30 2 1 0 1 ab
  1     ; gen_random.py 1 100 3 1 0 1 abc
  1     ; gen_random.py 15 80 5 1 0 1 xy
  1     ; gen_random.py 13 5000 2 1 1 1 klm
  1     ; gen_random.py 10 30 2 1 1 1 a
  1     ; gen_random.py 10 5 5 1 0 1 ab
  1     ; gen_random.py 10 67 3 1 0 0 ab
  1     ; gen_random.py 6 7 2 7 0 0 ab
  1     ; gen_random.py 2 9999 4 1 1 0 ab
  1     ; gen_random.py 3 98 2 1 1 0 ab
  1     ; gen_random.py 3 100 60 1 0 0 ab
  1     ; gen_random.py 5 23 23 1 0 0 ab

[Subtask 2 - validators/st2.cpp]
  # Random tests
  1     ; gen_random.py 10 100 20 0 0 1 ab
  1     ; gen_random.py 1 100 3 0 0 1 abc
  1     ; gen_random.py 15 80 3 0 0 1 xy
  1     ; gen_random.py 13 50 5 0 1 1 klm
  1     ; gen_random.py 100 30 2 0 1 1 a
  1     ; gen_random.py 80 5 5 0 0 1 ab
  1     ; gen_random.py 10 67 6 0 0 0 ab
  1     ; gen_random.py 10 7 7 0 0 0 ab
  1     ; gen_random.py 60 99 8 0 0 0 ab
  1     ; gen_random.py 3 98 20 0 0 0 ab
  1     ; gen_random.py 4 100 20 0 0 0 ab
  1     ; gen_random.py 5 100 20 0 0 0 ab

[Subtask 3 - validators/st3.cpp]
  # Random tests
  1     ; gen_random.py 100 10000 100 0 0 1 ab
  1     ; gen_random.py 60 10000 100 0 0 1 abc
  1     ; gen_random.py 10 10000 2 0 0 1 a
  1     ; gen_random.py 100 10000 5 0 1 1 tdx
  1     ; gen_random.py 100 10000 100 0 1 1 a
  1     ; gen_random.py 80 10000 50 0 0 1 ab
  1     ; gen_random.py 10 10000 100 0 0 0 ab
  1     ; gen_random.py 10 10000 100 0 0 0 ab
  1     ; gen_random.py 60 10000 100 0 0 0 ab
  1     ; gen_random.py 10 10000 100 0 0 0 ab
  1     ; gen_random.py 10 10000 100 0 0 0 ab
  1     ; gen_random.py 10 10000 100 0 0 0 ab
